// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/cf-tcp-router/metrics_reporter/haproxy_client"
)

type FakeHaproxyClient struct {
	GetStatsStub        func() haproxy_client.HaproxyStats
	getStatsMutex       sync.RWMutex
	getStatsArgsForCall []struct {
	}
	getStatsReturns struct {
		result1 haproxy_client.HaproxyStats
	}
	getStatsReturnsOnCall map[int]struct {
		result1 haproxy_client.HaproxyStats
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHaproxyClient) GetStats() haproxy_client.HaproxyStats {
	fake.getStatsMutex.Lock()
	ret, specificReturn := fake.getStatsReturnsOnCall[len(fake.getStatsArgsForCall)]
	fake.getStatsArgsForCall = append(fake.getStatsArgsForCall, struct {
	}{})
	stub := fake.GetStatsStub
	fakeReturns := fake.getStatsReturns
	fake.recordInvocation("GetStats", []interface{}{})
	fake.getStatsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHaproxyClient) GetStatsCallCount() int {
	fake.getStatsMutex.RLock()
	defer fake.getStatsMutex.RUnlock()
	return len(fake.getStatsArgsForCall)
}

func (fake *FakeHaproxyClient) GetStatsCalls(stub func() haproxy_client.HaproxyStats) {
	fake.getStatsMutex.Lock()
	defer fake.getStatsMutex.Unlock()
	fake.GetStatsStub = stub
}

func (fake *FakeHaproxyClient) GetStatsReturns(result1 haproxy_client.HaproxyStats) {
	fake.getStatsMutex.Lock()
	defer fake.getStatsMutex.Unlock()
	fake.GetStatsStub = nil
	fake.getStatsReturns = struct {
		result1 haproxy_client.HaproxyStats
	}{result1}
}

func (fake *FakeHaproxyClient) GetStatsReturnsOnCall(i int, result1 haproxy_client.HaproxyStats) {
	fake.getStatsMutex.Lock()
	defer fake.getStatsMutex.Unlock()
	fake.GetStatsStub = nil
	if fake.getStatsReturnsOnCall == nil {
		fake.getStatsReturnsOnCall = make(map[int]struct {
			result1 haproxy_client.HaproxyStats
		})
	}
	fake.getStatsReturnsOnCall[i] = struct {
		result1 haproxy_client.HaproxyStats
	}{result1}
}

func (fake *FakeHaproxyClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getStatsMutex.RLock()
	defer fake.getStatsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHaproxyClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ haproxy_client.HaproxyClient = new(FakeHaproxyClient)
