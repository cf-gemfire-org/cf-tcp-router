// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"os"
	"sync"

	"code.cloudfoundry.org/cf-tcp-router/monitor"
)

type FakeMonitor struct {
	RunStub        func(<-chan os.Signal, chan<- struct{}) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 <-chan os.Signal
		arg2 chan<- struct{}
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	StartWatchingStub        func()
	startWatchingMutex       sync.RWMutex
	startWatchingArgsForCall []struct {
	}
	StopWatchingStub        func()
	stopWatchingMutex       sync.RWMutex
	stopWatchingArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMonitor) Run(arg1 <-chan os.Signal, arg2 chan<- struct{}) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 <-chan os.Signal
		arg2 chan<- struct{}
	}{arg1, arg2})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1, arg2})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMonitor) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeMonitor) RunCalls(stub func(<-chan os.Signal, chan<- struct{}) error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeMonitor) RunArgsForCall(i int) (<-chan os.Signal, chan<- struct{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMonitor) RunReturns(result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMonitor) RunReturnsOnCall(i int, result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMonitor) StartWatching() {
	fake.startWatchingMutex.Lock()
	fake.startWatchingArgsForCall = append(fake.startWatchingArgsForCall, struct {
	}{})
	stub := fake.StartWatchingStub
	fake.recordInvocation("StartWatching", []interface{}{})
	fake.startWatchingMutex.Unlock()
	if stub != nil {
		fake.StartWatchingStub()
	}
}

func (fake *FakeMonitor) StartWatchingCallCount() int {
	fake.startWatchingMutex.RLock()
	defer fake.startWatchingMutex.RUnlock()
	return len(fake.startWatchingArgsForCall)
}

func (fake *FakeMonitor) StartWatchingCalls(stub func()) {
	fake.startWatchingMutex.Lock()
	defer fake.startWatchingMutex.Unlock()
	fake.StartWatchingStub = stub
}

func (fake *FakeMonitor) StopWatching() {
	fake.stopWatchingMutex.Lock()
	fake.stopWatchingArgsForCall = append(fake.stopWatchingArgsForCall, struct {
	}{})
	stub := fake.StopWatchingStub
	fake.recordInvocation("StopWatching", []interface{}{})
	fake.stopWatchingMutex.Unlock()
	if stub != nil {
		fake.StopWatchingStub()
	}
}

func (fake *FakeMonitor) StopWatchingCallCount() int {
	fake.stopWatchingMutex.RLock()
	defer fake.stopWatchingMutex.RUnlock()
	return len(fake.stopWatchingArgsForCall)
}

func (fake *FakeMonitor) StopWatchingCalls(stub func()) {
	fake.stopWatchingMutex.Lock()
	defer fake.stopWatchingMutex.Unlock()
	fake.StopWatchingStub = stub
}

func (fake *FakeMonitor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.startWatchingMutex.RLock()
	defer fake.startWatchingMutex.RUnlock()
	fake.stopWatchingMutex.RLock()
	defer fake.stopWatchingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMonitor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ monitor.Monitor = new(FakeMonitor)
