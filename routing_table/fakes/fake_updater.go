// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/cf-tcp-router/routing_table"
	routing_api "code.cloudfoundry.org/routing-api"
)

type FakeUpdater struct {
	HandleEventStub        func(routing_api.TcpEvent) error
	handleEventMutex       sync.RWMutex
	handleEventArgsForCall []struct {
		arg1 routing_api.TcpEvent
	}
	handleEventReturns struct {
		result1 error
	}
	handleEventReturnsOnCall map[int]struct {
		result1 error
	}
	PruneStaleRoutesStub        func()
	pruneStaleRoutesMutex       sync.RWMutex
	pruneStaleRoutesArgsForCall []struct {
	}
	SyncStub        func()
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
	}
	SyncingStub        func() bool
	syncingMutex       sync.RWMutex
	syncingArgsForCall []struct {
	}
	syncingReturns struct {
		result1 bool
	}
	syncingReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdater) HandleEvent(arg1 routing_api.TcpEvent) error {
	fake.handleEventMutex.Lock()
	ret, specificReturn := fake.handleEventReturnsOnCall[len(fake.handleEventArgsForCall)]
	fake.handleEventArgsForCall = append(fake.handleEventArgsForCall, struct {
		arg1 routing_api.TcpEvent
	}{arg1})
	stub := fake.HandleEventStub
	fakeReturns := fake.handleEventReturns
	fake.recordInvocation("HandleEvent", []interface{}{arg1})
	fake.handleEventMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUpdater) HandleEventCallCount() int {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	return len(fake.handleEventArgsForCall)
}

func (fake *FakeUpdater) HandleEventCalls(stub func(routing_api.TcpEvent) error) {
	fake.handleEventMutex.Lock()
	defer fake.handleEventMutex.Unlock()
	fake.HandleEventStub = stub
}

func (fake *FakeUpdater) HandleEventArgsForCall(i int) routing_api.TcpEvent {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	argsForCall := fake.handleEventArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUpdater) HandleEventReturns(result1 error) {
	fake.handleEventMutex.Lock()
	defer fake.handleEventMutex.Unlock()
	fake.HandleEventStub = nil
	fake.handleEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) HandleEventReturnsOnCall(i int, result1 error) {
	fake.handleEventMutex.Lock()
	defer fake.handleEventMutex.Unlock()
	fake.HandleEventStub = nil
	if fake.handleEventReturnsOnCall == nil {
		fake.handleEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpdater) PruneStaleRoutes() {
	fake.pruneStaleRoutesMutex.Lock()
	fake.pruneStaleRoutesArgsForCall = append(fake.pruneStaleRoutesArgsForCall, struct {
	}{})
	stub := fake.PruneStaleRoutesStub
	fake.recordInvocation("PruneStaleRoutes", []interface{}{})
	fake.pruneStaleRoutesMutex.Unlock()
	if stub != nil {
		fake.PruneStaleRoutesStub()
	}
}

func (fake *FakeUpdater) PruneStaleRoutesCallCount() int {
	fake.pruneStaleRoutesMutex.RLock()
	defer fake.pruneStaleRoutesMutex.RUnlock()
	return len(fake.pruneStaleRoutesArgsForCall)
}

func (fake *FakeUpdater) PruneStaleRoutesCalls(stub func()) {
	fake.pruneStaleRoutesMutex.Lock()
	defer fake.pruneStaleRoutesMutex.Unlock()
	fake.PruneStaleRoutesStub = stub
}

func (fake *FakeUpdater) Sync() {
	fake.syncMutex.Lock()
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
	}{})
	stub := fake.SyncStub
	fake.recordInvocation("Sync", []interface{}{})
	fake.syncMutex.Unlock()
	if stub != nil {
		fake.SyncStub()
	}
}

func (fake *FakeUpdater) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeUpdater) SyncCalls(stub func()) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = stub
}

func (fake *FakeUpdater) Syncing() bool {
	fake.syncingMutex.Lock()
	ret, specificReturn := fake.syncingReturnsOnCall[len(fake.syncingArgsForCall)]
	fake.syncingArgsForCall = append(fake.syncingArgsForCall, struct {
	}{})
	stub := fake.SyncingStub
	fakeReturns := fake.syncingReturns
	fake.recordInvocation("Syncing", []interface{}{})
	fake.syncingMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUpdater) SyncingCallCount() int {
	fake.syncingMutex.RLock()
	defer fake.syncingMutex.RUnlock()
	return len(fake.syncingArgsForCall)
}

func (fake *FakeUpdater) SyncingCalls(stub func() bool) {
	fake.syncingMutex.Lock()
	defer fake.syncingMutex.Unlock()
	fake.SyncingStub = stub
}

func (fake *FakeUpdater) SyncingReturns(result1 bool) {
	fake.syncingMutex.Lock()
	defer fake.syncingMutex.Unlock()
	fake.SyncingStub = nil
	fake.syncingReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeUpdater) SyncingReturnsOnCall(i int, result1 bool) {
	fake.syncingMutex.Lock()
	defer fake.syncingMutex.Unlock()
	fake.SyncingStub = nil
	if fake.syncingReturnsOnCall == nil {
		fake.syncingReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.syncingReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	fake.pruneStaleRoutesMutex.RLock()
	defer fake.pruneStaleRoutesMutex.RUnlock()
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	fake.syncingMutex.RLock()
	defer fake.syncingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ routing_table.Updater = new(FakeUpdater)
